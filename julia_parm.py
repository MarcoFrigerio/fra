import numpy as np
import math
import json
from distutils import util

f="julia_parm.json"
with open(f) as f:
	params=json.load(f)
# OUTPUT_SIZE_4N_PIXELS_X = 1080 # number of columns
# OUTPUT_SIZE_IN_PIXELS_Y = 1920 # number of rows
# RGB=3
RGB=int(params["RGB"])
# OUTPUT_SIZE_IN_PIXELS_X = 1440  # 2k number of columns
OUTPUT_SIZE_IN_PIXELS_X = int(params["OUTPUT_SIZE_IN_PIXELS_X"])
# OUTPUT_SIZE_IN_PIXELS_Y = 2560  # 2k number of rows
OUTPUT_SIZE_IN_PIXELS_Y = int(params["OUTPUT_SIZE_IN_PIXELS_Y"])  # 2k number of rows

# OUTPUT_SIZE_IN_PIXELS_X = 2160  # 4k number of columns
# OUTPUT_SIZE_IN_PIXELS_Y = 3840  # 4k number of rows

X_RANGE=float(params["X_RANGE"])                   # initial start range of y values 
# X_RANGE=.25                   # initial start range of y values 
# MAX_ITERATIONS =100             # If 0 then it s dinamic. Else, it s max number of iterations in single pixel opencl calculation. 
MAX_ITERATIONS =int(params["MAX_ITERATIONS"])             # If 0 then it s dinamic. Else, it s max number of iterations in single pixel opencl calculation. 
# MINJITER=80               # if dinamic, initial number of iterations 
# MAXJITER=5000             # if dinamic, final number of iterations 
MINJITER=int(params["MINJITER"])               # if dinamic, initial number of iterations 
MAXJITER=int(params["MAXJITER"])             # if dinamic, final number of iterations 

MANDELBROT_THRESHOLD = int(params["MANDELBROT_THRESHOLD"])        # thresold of the absolute value of reiterated Z=
# MANDELBROT_THRESHOLD = 2        # thresold of the absolute value of reiterated Z=
MIN=int(params["MIN"])                       # start point of C values 
# MIN=1                       # start point of C values 
# MAX=70_000_000_000                        # end point of C values
# FRAMEEVERY=5_500_000                   # number of frames not calculated between two calculated
# MAX=1_400_000                        # end point of C values
MAX=int(params["MAX"])                        # end point of C values
# FRAMEEVERY=200                   # number of frames not calculated between two calculated
FRAMEEVERY=int(params["FRAMEEVERY"])                   # number of frames not calculated between two calculated
# MAX=2_800_000                        # end point of C values
# FRAMEEVERY=600                   # number of frames not calculated between two calculated

# CYCLEFRAMEBASE=60
CYCLEFRAMEBASE=int(params["CYCLEFRAMEBASE"])
CYCLEFRAME=CYCLEFRAMEBASE*FRAMEEVERY

# SPEEDF =0.3                    # max delta of change of C value in julia set	
SPEEDF =float(params["SPEEDF"])                    # max delta of change of C value in julia set	
# POWR=2                          # powr of Z in iteration function
POWR=int(params["POWR"])                          # powr of Z in iteration function

############################
# CX VALUES
############################
# CX=-.35                          # position of x center (good for julia set)
CX=float(params["CX"])                          # position of x center (good for julia set)
CY=float(params["CY"])                          # position of x center (good for julia set)
# CY=.5                        # position of y center (good for julia set)
# CX=0.413238151606368892027      # position of y center (good for mandelbrot set)
# CY=-1.24254013716898265806      # position of y center	 (good for mandelbrot set)
# CX = 0.1374168856037867 
# CY = -0.7746806106269039
# CY = 0.5		
# CX = 0.28
# CX=0.036170
# CY=-0.020346 
# CX=-0.6413130610648031748603750151793020665794949522823052595561775430644485741727536902556370230689681162370740565537072149790106973211105273740851993394803287437606238596262287731075999483940467161288840614581091294325709988992269165007394305732683208318834672366947550710920088501655704252385244481168836426277052232593412981472237968353661477793530336607247738951625817755401065045362273039788332245567345061665756708689359294516668271440525273653083717877701237756144214394870245598590883973716531691124286669552803640414068523325276808909040317617092683826521501539932397262012011082098721944643118695001226048977430038509470101715555439047884752058334804891389685530946112621573416582482926221804767466258346014417934356149837352092608891639072745930639364693513216719114523328990690069588676087923656657656023794484324797546024248328156586471662631008741349069961493817600100133439721557969263221185095951241491408756751582471307537382827924073746760884081704887902040036056611401378785952452105099242499241003208013460878442953408648178692353788153787229940221611731034405203519945313911627314900851851072122990492499999999999999999991
# CY=0.360240443437614363236125244449545308482607807958585750488375814740195346059218100311752936722773426396233731729724987737320035372683285317664532401218521579554288661726564324134702299962817029213329980895208036363104546639698106204384566555001322985619004717862781192694046362748742863016467354574422779443226982622356594130430232458472420816652623492974891730419252651127672782407292315574480207005828774566475024380960675386215814315654794021855269375824443853463117354448779647099224311848192893972572398662626725254769950976527431277402440752868498588785436705371093442460696090720654908973712759963732914849861213100695402602927267843779747314419332179148608587129105289166676461292845685734536033692577618496925170576714796693411776794742904333484665301628662532967079174729170714156810530598764525260869731233845987202037712637770582084286587072766838497865108477149114659838883818795374195150936369987302574377608649625020864292915913378927790344097552591919409137354459097560040374880346637533711271919419723135538377394364882968994646845930838049998854075817859391340445151448381853615103761584177161812057928
# CY=-1.9997740601362903593126807559602500475710416233856384007148508574291012335984591928248364190215796259575718318799960175396106897245889581254834492701372949636783094955897931317174101259095891469501748126725148714587333938548443819033709904187344921523413310221887295870857771431011674873342592895504186325482220668710775749899926429101099841583206278295793058921625817004481783699245865364627140554117737774937789463895102748671351750212506004241754983473339789940659968568850689353099462034492524909310777724611601104714214019347435268544619054369865904944457792527241696528695821059623303046651934176389789308453627525109367436309636375268231073110318555064708363221007235298404379856922536028913291478442839193381367508575286692330907891402483843152933153748354825108021776358693600801782904774626935265722056455978643513448489091026679036353407968495795003386248005939867069799946547181378474054113117046900560609110812439442002663909295191705374444149326937073460052706389967886211172676612720028299452788285465688867116337489531157494508508315428488520037968118008255840569742557333862639124341116894229885253643651920014148109308402199399127712572209466874971603743536096235390414412927589954662603878558182262865151900604451937214289079939337905846647369517138325441736853526711818853134657265043099539402286244220638999824999819000131999789999857999958
# CX=0.0000000032900403214794350534969786759266805967852946505878410088326046927853549452991056352681196631150325234171525664335353457621247922992470898021063583060218954321140472066153878996044171428801408137278072521468882260382336298800961530905692393992277070012433445706657829475924367459793505729004118759963065667029896464160298608486277109065108339157276150465318584383757554775431988245033409975361804443001325241206485033571912765723551757793318752425925728969073157628495924710926832527350298951594826689051400340011140584507852761857568007670527511272585460136585523090533629795012272916453744029579624949223464015705500594059847850617137983380334184205468184810116554041390142120676993959768153409797953194054452153167317775439590270326683890021272963306430827680201998682699627962109145863135950941097962048870017412568065614566213639455841624790306469846132055305041523313740204187090956921716703959797752042569621665723251356946610646735381744551743865516477084313729738832141633286400726001116308041460406558452004662264165125100793429491308397667995852591271957435535504083325331161340230101590756539955554407081416407239097101967362512942992702550533040602039494984081681370518238283847808934080198642728761205332894028474812918370467949299531287492728394399650466260849557177609714181271299409118059191938687461000000000000000000000000000000000000
############################

# CX=math.e/20
# CY=math.e/7
# CX=0      # position of y center
# CY=0      # position of y center	

# DIR="img/"                   # working dir
DIR=params["DIR"]                   # working dir
# MANDELBROT=0                    # 1 = mandelbrot set , 0 = julia set
MANDELBROT= int(params["MANDELBROT"])                     # 1 = mandelbrot set , 0 = julia set
# FLAG_ZOOM=False                  # Flag Zoom the image
FLAG_ZOOM=bool(util.strtobool(params["FLAG_ZOOM"]))                  # Flag Zoom the image
FLAG_ROTATE=bool(util.strtobool(params["FLAG_ROTATE"]))               #apply a movement to j values
# FLAG_ROTATE=True               #apply a movement to j values


############################
# JX VALUES
############################
# JX=.18400000017745496
# JY=.6121538462707095
# JX=-0.748584228515625       #inital coord of C real value in julia set
# JY=-0.100362353515625       #inital coord of C imaginary value in julia set
# JX=-0.835
# JY=-0.232
# JX=0.34676923076923083
# JY=-0.39276923076923026
# JX=-1.76938317919551501821384728608547378290574726365475143746552821652789971538042486160358350056705;
# JY=0.00423684791873677221492650717136799707668267091740375727945943565011165050579686460572594185089;
############################
# JX=-0.5646996838777659
# JY=0.5586406768963872
JX=float(params["JX"])
JY=float(params["JY"])
# EXPZOOMSTART=0.05
# EXPZOOM=2.6
EXPZOOMSTART=float(params["EXPZOOMSTART"])
EXPZOOM=float(params["EXPZOOM"])

def fjx(input_i):
	if FLAG_ROTATE:return np.float64(math.pow(math.cos(input_i),2)*math.sin(input_i)*SPEEDF)
	return np.float64(0)

def fjy(input_i):
	if FLAG_ROTATE:return np.float64(math.pow(math.sin(input_i),2)*SPEEDF)
	return np.float64(0)

def calc_xrange(input_i):
	return (MAX-input_i)/(MAX+input_i*100)	

def calc_zoom(xrange,z):
	return np.float64((xrange-z)/(100*z+xrange))


